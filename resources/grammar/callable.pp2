
CallableType -> {
    $name = \array_shift($children);

    if ($this->callables === false) {
        throw FeatureNotAllowedException::fromFeature('callable types', $offset);
    }

    $parameters = isset($children[0]) && $children[0] instanceof Node\Stmt\Callable\ParametersListNode
        ? \array_shift($children)
        : new Node\Stmt\Callable\CallableParametersListNode();

    return new Node\Stmt\CallableTypeNode(
        name: $name,
        parameters: $parameters,
        type: $children[0] ?? null,
    );
}
  : Name()
    ::T_PARENTHESIS_OPEN::
        CallableParameters()?
    ::T_PARENTHESIS_CLOSE::
    CallableReturnType()?
  ;

CallableParameters -> {
    return new Node\Stmt\Callable\CallableParametersListNode($children);
}
  : CallableParameter() (::T_COMMA:: CallableParameter())* ::T_COMMA::?
  ;

CallableParameter -> {
    $result = \end($children);

    if ($children[0] instanceof Node\Stmt\Attribute\AttributeGroupsListNode) {
        if ($this->attributes === false) {
            throw FeatureNotAllowedException::fromFeature('callable parameter attributes', $offset);
        }

        $result->attributes = $children[0];
    }

    return $result;
}
  : AttributeGroupsList()?
    CallableParameter()
  ;

CallableParameter
  : MaybeDefaultCallableParameter()
  ;

// Expects expression:
// - "<param>"
// - "<param> ="
MaybeDefaultCallableParameter -> {
    if (\count($children) === 1) {
        return $children[0];
    }

    if ($children[0]->variadic) {
        throw SemanticException::fromVariadicWithDefault($offset);
    }

    $children[0]->optional = true;
    return $children[0];
}
  : ( MaybePrefixedVariadicTypedNamedCallableParameter()
    | MaybeModifiersNamedCallableParameter() )
    <T_ASSIGN>?
  ;

// Expects expression:
// - "&...<var_param>"
// - "...&<var_param>"
// - "...<var_param>"
// - "&<var_param>"
// - "<var_param>"
MaybeModifiersNamedCallableParameter -> {
    if (!\is_array($children)) {
        return $children;
    }

    $result = \end($children);

    foreach ($children as $modifier) {
        if ($modifier instanceof \Phplrt\Contracts\Lexer\TokenInterface) {
            switch ($modifier->getName()) {
                case 'T_AMP':
                    $result->output = true;
                    break;
                case 'T_ELLIPSIS':
                    if ($result->variadic) {
                        throw SemanticException::fromVariadicRedefinition($offset);
                    }
                    $result->variadic = true;
                    break;
            }
        }
    }

    return $result;
}
  : <T_AMP> <T_ELLIPSIS> MaybeNamedCallableParameter()
  | <T_ELLIPSIS> <T_AMP> MaybeNamedCallableParameter()
  | <T_ELLIPSIS> MaybeNamedCallableParameter()
  | <T_AMP> MaybeNamedCallableParameter()
  | MaybeNamedCallableParameter()
  ;

// Expects expression:
// - "$<var>"
MaybeNamedCallableParameter -> {
    return new Node\Stmt\Callable\CallableParameterNode(null, $children[0]);
}
  : VariableLiteral()
  ;

MaybePrefixedVariadicTypedNamedCallableParameter -> {
    if (\count($children) === 1) {
        return $children[0];
    }

    if ($children[1]->variadic) {
        throw SemanticException::fromVariadicRedefinition($offset);
    }

    $children[1]->variadic = true;
    return $children[1];
}
  : <T_ELLIPSIS>? MaybeTypedNamedCallableParameter()
  ;

// Expects expression:
// - "<typed_param> $<var>"
// - "<typed_param>"
MaybeTypedNamedCallableParameter -> {
    if (\count($children) === 1) {
        return $children[0];
    }

    $children[0]->name = $children[1];
    return $children[0];
}
  : MaybeModifiersTypedCallableParameter()
    VariableLiteral()?
  ;

// Expects expression:
// - "<type>...&"
// - "<type>&..."
// - "<type>&"
// - "<type>..."
// - "<type>"
MaybeModifiersTypedCallableParameter -> {
    $result = \reset($children);

    foreach ($children as $modifier) {
        if ($modifier instanceof \Phplrt\Contracts\Lexer\TokenInterface) {
            switch ($modifier->getName()) {
                case 'T_AMP':
                    $result->output = true;
                    break;
                case 'T_ELLIPSIS':
                    if ($result->variadic) {
                        throw SemanticException::fromVariadicRedefinition($offset);
                    }
                    $result->variadic = true;
                    break;
            }
        }
    }

    return $result;
}
  : TypedCallableParameter()
    ( <T_AMP> <T_ELLIPSIS>?
    | <T_ELLIPSIS> <T_AMP>? )?
  ;

// Expects expression:
// - "<type>"
TypedCallableParameter -> {
    return new Node\Stmt\Callable\CallableParameterNode($children[0]);
}
  : Type()
  ;

CallableReturnType
  : ::T_COLON:: Type()
  ;
