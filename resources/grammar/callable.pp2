
CallableType -> {
    $name = \array_shift($children);

    if ($this->callables === false) {
        throw FeatureNotAllowedException::fromFeature('callable types', $offset);
    }

    $parameters = isset($children[0]) && $children[0] instanceof Node\Stmt\Callable\ParametersListNode
        ? \array_shift($children)
        : new Node\Stmt\Callable\CallableParametersListNode();

    return new Node\Stmt\CallableTypeNode(
        name: $name,
        parameters: $parameters,
        type: $children[0] ?? null,
    );
}
  : Name()
    ::T_PARENTHESIS_OPEN::
        CallableParameters()?
    ::T_PARENTHESIS_CLOSE::
    CallableReturnType()?
  ;

CallableParameters -> {
    return new Node\Stmt\Callable\CallableParametersListNode($children);
}
  : CallableParameter() (::T_COMMA:: CallableParameter())* ::T_COMMA::?
  ;

CallableParameter -> {
    $result = \end($children);

    if ($children[0] instanceof Node\Stmt\Attribute\AttributeGroupsListNode) {
        if ($this->attributes === false) {
            throw FeatureNotAllowedException::fromFeature('callable parameter attributes', $offset);
        }

        $result->attributes = $children[0];
    }

    return $result;
}
  : AttributeGroupsList()?
    CallableParameter()
  ;

CallableParameter
  : MaybeDefaultCallableParameter()
  ;

// Parses "<param>" or "<param> =" expression
MaybeDefaultCallableParameter -> {
    if (\count($children) === 1) {
        return $children[0];
    }

    if ($children[0]->variadic) {
        throw SemanticException::fromVariadicWithDefault($offset);
    }

    $children[0]->optional = true;
    return $children[0];
}
  : MaybeNamedCallableParameter() <T_ASSIGN>?
  ;

// Parses "$variable" or "<param> $variable", or "<param>" expression
MaybeNamedCallableParameter -> {
    if ($children instanceof Node\Stmt\Callable\CallableParameterNode) {
        return $children;
    }

    if (\count($children) === 1) {
        return $children[0];
    }

    $children[0]->name = $children[1];
    return $children[0];
}
  : MaybeVariableCallableParameter()
  | MaybeVariadicCallableParameter() VariableLiteral()?
  ;

// Parses "$variable" expression
MaybeVariableCallableParameter -> {
    return new Node\Stmt\Callable\CallableParameterNode(null, $children[0]);
}
  : VariableLiteral()
  ;

// Parses "...<param>" or "<param>...", or "<param>" expression
MaybeVariadicCallableParameter -> {
    if (count($children) === 1) {
        return $children[0];
    }

    if ($children[0] instanceof Node\Stmt\Callable\ParameterNode) {
        $children[0]->variadic = true;
        return $children[0];
    }

    $children[1]->variadic = true;
    return $children[1];
}
  : <T_ELLIPSIS> MaybeOutputCallableParameter()   // Prefixed variadic argument (Psalm format)
  | MaybeOutputCallableParameter() <T_ELLIPSIS>?  // Suffixed variadic argument (PhpStan + Psalm)
  ;

// Parses "<param>&" or "<param>" expression
MaybeOutputCallableParameter -> {
    $argument = new Node\Stmt\Callable\CallableParameterNode($children[0]);

    if (\count($children) !== 1) {
        $argument->output = true;
    }

    return $argument;
}
  : Type() <T_AMP>?
  ;

CallableReturnType
  : ::T_COLON:: Type()
  ;
